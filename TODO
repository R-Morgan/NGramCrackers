TODO

######
High
######

-- write a bash-based execution script to compile, then run

-- Add texts that actually work in the parser to the repository

-- implement command line argument parsing and handling [Testing]

   -- Implement multiple modes [Testing]
      
      -- Profile:
         
         This will provide a way to obtain general stats about a
         document. Some options will be:

         -w        word count
         -l        line count
         -t        type token ratio

      -- Extract:

         The will provide ways to obtain a profile with counts of all words
         and output it to a file. Ideally this will include functionality for
         n-gram extraction. Some options will be:

         -i        input file
         -o        output file
         -w        words
         -b        bigrams
         -t        trigrams
         -n        ngrams
   
-- implement lexeme frequency counter [Testing]

   -- The problem with this function is that it may count "".
      This will need to be corrected in the construction of
      lists
   
   -- countWord, getWordsFreqs, lexemeCountProfile are all
      related to this goal

-- implement n-gram frequency counter [Testing]

   -- I have done this for words, bi- and trigrams with 
      ngramCountProfile. There are backend functions like
      getNGramsFromList that can help with a more flexible
      function to get 4- and 5-grams.

-- make sure all non-parser functions and such have type sigs

######
Med
######

-- implement functionality to parse multiple paragraphs. The L.
   documents should be a good guide to determine what actually separates
   the paragraphs

-- Implement normalising function to count words like "The" and "the" to
   be parsed as the same word

-- Add cabal file

-- Clean up ParagraphParser module code [In progress]

######
Low
######

-- Make a variety of n-gram processing functions to output in
   several different formats (e.g., list of strings, tuple)

   -- The API needs to be standardised so that the main functions
      all take Strings, or something like that

-- implement quickCheck tests
   
   -- test the text manipulation stuff -- i.e., the pure code

   -- IO tests -- not sure how to do that

-- implement data types like Corpus, Document, Paragraph, Sentence, Word

########
On-Going
########

-- Write more README.md 
   -- Add Version 1.0.0 definition

